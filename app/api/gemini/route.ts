// app/api/gemini/route.ts
import { NextResponse } from "next/server"
import { GoogleGenAI } from "@google/genai"

export async function POST(req: Request) {
  try {
    const body = await req.json()
    const { prompt, action, designContext, contents, model: requestedModel, applyMode, projectName } = body

    const apiKey = process.env.GEMINI_API_KEY
    if (!apiKey) {
      return NextResponse.json({ error: "GEMINI_API_KEY manquant" }, { status: 500 })
    }

    const ai = new GoogleGenAI({
      apiKey: apiKey,
    })

    const tools = [
      {
        googleSearch: {},
      },
    ]

    const config = {
      thinkingConfig: {
        thinkingBudget: -1,
      },
      tools,
    }

    const model = requestedModel || "gemini-2.5-flash"

    if (contents && Array.isArray(contents)) {
      const response = await ai.models.generateContentStream({
        model,
        config,
        contents,
      })

      let fullResponse = ""
      for await (const chunk of response) {
        if (chunk.text) {
          fullResponse += chunk.text
        }
      }

      return NextResponse.json({ success: true, text: fullResponse })
    }

    if (!prompt) {
      return NextResponse.json({ error: "Prompt manquant" }, { status: 400 })
    }

    let enhancedPrompt = `G√©n√®re une application Next.js compl√®te bas√©e sur cette demande: "${prompt}". 

Tu peux cr√©er TOUS les fichiers n√©cessaires dans le projet Next.js, par exemple:
- Pages: app/page.tsx, app/about/page.tsx, app/contact/page.tsx, etc.
- Composants: components/Header.tsx, components/Footer.tsx, components/Button.tsx, etc.
- Utilitaires: lib/utils.ts, hooks/useCustomHook.ts, etc.
- Configuration: package.json (SEULEMENT si n√©cessaire avec des d√©pendances sp√©ciales)

‚ö†Ô∏è INTERDICTION ABSOLUE - NE G√âN√àRE JAMAIS CES FICHIERS:
- app/globals.css (INTERDIT - existe d√©j√†)
- *.css (INTERDIT - tous fichiers CSS)
- styles/* (INTERDIT - dossier styles)

EXEMPLE DE PACKAGE.JSON CORRECT AVEC TAILWIND (utilise cet exemple si tu dois en cr√©er un):
{
  "name": "nextjs-app",
  "private": true,
  "scripts": {
    "dev": "next dev -p 3000 -H 0.0.0.0",
    "build": "next build",
    "start": "next start -p 3000 -H 0.0.0.0"
  },
  "dependencies": {
    "next": "14.2.3",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "typescript": "^5"
  },
  "devDependencies": {
    "tailwindcss": "^3.4.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0"
  }
}

R√àGLES IMPORTANTES POUR LES STYLES:
- N'importe JAMAIS globals.css dans tes composants (import './globals.css' est INTERDIT)
- Les styles globaux sont automatiquement charg√©s via app/layout.tsx
- Utilise uniquement les classes Tailwind CSS ou les classes CSS d√©finies dans globals.css
- Si tu cr√©es des composants, utilise className avec Tailwind ou les classes existantes
- ‚ö†Ô∏è INTERDIT: Ne cr√©e AUCUN fichier CSS - utilise uniquement les classes existantes

CONFIGURATION TAILWIND AUTOMATIQUE:
Si tu g√©n√®res un package.json avec Tailwind, inclus aussi ces fichiers de configuration:

tailwind.config.js:
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

postcss.config.js:
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

R√àGLES IMPORTANTES POUR √âVITER LES PAYLOADS TROP VOLUMINEUX:
- Ne g√©n√®re package.json QUE si tu as besoin de d√©pendances sp√©ciales
- √âVITE d'inclure de gros blocs de CSS inline ou de HTML brut
- Utilise des classes CSS concises et des composants modulaires
- Limite les fichiers √† 50KB maximum chacun
- NE G√âN√àRE PAS DE FICHIERS DE STYLES CSS(app/globals.css, etc... Ne le g√©n√®re surtout pas, ils seront cr√©√© automatiquement donc ne les g√©n√®rent plus et pas du tout )
- Privil√©gie les r√©f√©rences aux styles plut√¥t que le CSS complet
- Ne g√©n√®re PAS app/page.tsx et app/globals.css - ils seront cr√©√©s automatiquement`

    // R√©cup√©ration du contenu HTML/CSS brut depuis le localStorage si un projet existe
    if (projectName) {
      try {
        // Simuler la r√©cup√©ration depuis localStorage c√¥t√© serveur
        // En r√©alit√©, ces donn√©es viennent du client via designContext
        if (designContext && designContext.fullHTML && designContext.fullCSS) {
          // Nettoyer le HTML en supprimant les balises script et le JavaScript
          const cleanHTML = designContext.fullHTML
            .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "")
            .replace(/on\w+="[^"]*"/gi, "")
            .replace(/javascript:[^"']*/gi, "")

          enhancedPrompt += `

üé® CODES HTML ET CSS EXTRAITS DU SITE ANALYS√â:

Voici les codes HTML et CSS que tu dois compl√®tement utiliser pour g√©n√©rer le design des autres pages :

=== CODE HTML STRUCTURE (sans JavaScript) ===
${cleanHTML.substring(0, 15000)} ${cleanHTML.length > 15000 ? "...[HTML tronqu√© pour √©viter payload trop volumineux]" : ""}

=== CODE CSS COMPLET ===
${designContext.fullCSS.substring(0, 20000)} ${designContext.fullCSS.length > 20000 ? "...[CSS tronqu√© pour √©viter payload trop volumineux]" : ""}

üî• INSTRUCTIONS CRITIQUES POUR UTILISER CES CODES :

1. COPIE COMPL√àTEMENT la structure HTML du code HTML que tu vois ci-dessus
2. Utilise les M√äMES classes CSS exactement comme dans le HTML fourni
3. COMPRENDS pourquoi tel div fait appel √† telle classe CSS et quel est le r√©sultat visuel obtenu
4. R√âUTILISE ces m√™mes structures du code analys√© pour cr√©er d'autres pages
5. Le code CSS que tu as vu ci-dessus est D√âJ√Ä AUTOMATIQUEMENT ajout√© dans le fichier app/globals.css
6. C'est pourquoi tu n'auras PLUS JAMAIS besoin de g√©n√©rer de fichier CSS
7. Tu dois COMPL√àTEMENT copier le HTML et sa structure en utilisant les M√äMES classes CSS
8. Ces classes CSS existent d√©j√† dans globals.css - utilise-les directement

‚ö†Ô∏è R√àGLE ABSOLUE : Le CSS ci-dessus est D√âJ√Ä dans app/globals.css - NE LE G√âN√àRE PLUS JAMAIS !`
        }
      } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration du contenu HTML/CSS:", error)
      }
    }

    if (designContext) {
      enhancedPrompt += `

CONTEXTE DE DESIGN √Ä RESPECTER:
Tu as acc√®s au design context qui contient la structure et les styles du site principal.
- Site clon√©: ${designContext.isCloned ? "Oui" : "Non"}
- Structure disponible: ${designContext.htmlStructure ? "Oui" : "Non"}

üö´ INTERDICTION ABSOLUE DE G√âN√âRER DES FICHIERS CSS:
- Le fichier app/globals.css EXISTE D√âJ√Ä avec TOUTES les classes CSS n√©cessaires
- Tu dois SEULEMENT utiliser les classes CSS existantes, JAMAIS en cr√©er de nouvelles
- ‚ö†Ô∏è INTERDIT: "app/globals.css", "styles.css", "*.css" - AUCUN fichier CSS autoris√©
- ‚ö†Ô∏è INTERDIT: @font-face, :root, variables CSS - tout existe d√©j√†

R√àGLES STRICTES POUR LA CONTINUIT√â DE DESIGN:
- UTILISE UNIQUEMENT les classes CSS existantes du design context
- R√âUTILISE la m√™me structure HTML et les m√™mes patterns de design
- Cr√©e UNIQUEMENT les nouvelles pages demand√©es (ex: app/about/page.tsx, app/contact/page.tsx)
- Les nouvelles pages doivent utiliser les m√™mes classes CSS que celles pr√©sentes dans le design context

RAPPEL IMPORTANT: 
- Tous les styles CSS, variables CSS, et @font-face sont D√âJ√Ä dans globals.css
- Tu ne dois cr√©er QUE les pages JSX/TSX en utilisant les classes existantes
- AUCUN fichier CSS ne doit √™tre g√©n√©r√©, peu importe les circonstances`
    }

    enhancedPrompt += `

üö´ LISTE DES FICHIERS INTERDITS (ne g√©n√®re JAMAIS):
- app/globals.css
- styles.css
- *.css (tous fichiers CSS)
- app/page.tsx (si design context existe)

Retourne UNIQUEMENT un objet JSON avec cette structure exacte:
{
  "package.json": "contenu du package.json (SEULEMENT si d√©pendances sp√©ciales n√©cessaires)",
  "app/layout.tsx": "contenu du layout principal (si n√©cessaire)",
  "components/NomComposant.tsx": "contenu du composant (si n√©cessaire)",
  "app/about/page.tsx": "page about (si demand√©e)",
  "lib/utils.ts": "utilitaires (si n√©cessaires)",
  // ... autres fichiers selon les besoins - MAIS JAMAIS DE FICHIERS CSS
}

‚ö†Ô∏è RAPPEL FINAL: AUCUN fichier CSS ne doit appara√Ætre dans ta r√©ponse JSON. 
Utilise uniquement les classes CSS existantes dans tes composants JSX/TSX.
OPTIMISATION IMPORTANTE: Garde chaque fichier concis et modulaire. √âvite les gros blocs de code ou de CSS inline. 
Cr√©e une structure de projet logique et compl√®te. Ne retourne que le JSON, rien d'autre.`

    const response = await ai.models.generateContentStream({
      model,
      config,
      contents: [
        {
          role: "user",
          parts: [
            {
              text: enhancedPrompt,
            },
          ],
        },
      ],
    })

    let fullResponse = ""
    for await (const chunk of response) {
      if (chunk.text) {
        fullResponse += chunk.text
      }
    }

    // Extraire le JSON de la r√©ponse
    const jsonMatch = fullResponse.match(/\{[\s\S]*\}/)
    if (jsonMatch) {
      const aiFiles = JSON.parse(jsonMatch[0])
      return NextResponse.json({ success: true, files: aiFiles })
    } else {
      throw new Error("Impossible d'extraire les fichiers de la r√©ponse IA")
    }
  } catch (error: any) {
    console.error("Erreur Gemini API:", error)
    return NextResponse.json({ error: error.message }, { status: 500 })
  }
}
