import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { files, projectName, accessToken, repoName, sandboxId } = await request.json()

    console.log("[v0] Starting GitHub deployment for project:", projectName)
    console.log("[v0] Sandbox ID:", sandboxId)

    let deployFiles = files
    if (sandboxId && (!files || Object.keys(files).length === 0)) {
      console.log("[v0] No files provided, extracting from sandbox:", sandboxId)

      const extractResponse = await fetch(`${request.nextUrl.origin}/api/sandbox`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "getFiles",
          sandboxId: sandboxId,
        }),
      })

      const extractData = await extractResponse.json()

      if (!extractData.success) {
        throw new Error(`Failed to extract files from sandbox: ${extractData.error}`)
      }

      deployFiles = extractData.files
      console.log("[v0] Extracted", extractData.fileCount, "files from sandbox")
    }

    console.log("[v0] Files to deploy:", Object.keys(deployFiles || {}))

    if (!deployFiles || Object.keys(deployFiles).length === 0) {
      throw new Error("No files available for GitHub deployment")
    }

    if (!accessToken) {
      throw new Error("GitHub access token is required")
    }

    const finalRepoName = repoName || projectName

    const checkRepoResponse = await fetch(`https://api.github.com/repos/${finalRepoName}`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${accessToken}`,
        "User-Agent": "v0-sandbox-app",
      },
    })

    let repoData
    const repoExists = checkRepoResponse.ok

    if (repoExists) {
      repoData = await checkRepoResponse.json()
      console.log("[v0] Repository already exists:", repoData.full_name)
    } else {
      // Create repository
      const repoResponse = await fetch("https://api.github.com/user/repos", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${accessToken}`,
          "Content-Type": "application/json",
          "User-Agent": "v0-sandbox-app",
        },
        body: JSON.stringify({
          name: finalRepoName,
          description: `Generated by v0 sandbox - ${projectName}`,
          private: false,
          auto_init: true,
        }),
      })

      repoData = await repoResponse.json()
      console.log("[v0] GitHub repo creation response:", repoData)

      if (!repoResponse.ok) {
        const errorMessage = repoData.message || "Failed to create GitHub repository"
        console.error("[v0] GitHub repo creation failed:", errorMessage)
        throw new Error(`GitHub API Error: ${errorMessage}`)
      }

      console.log("[v0] Repository created:", repoData.full_name)
    }

    if (!repoData.full_name) {
      throw new Error("Repository operation failed - no full_name returned")
    }

    const uploadResults = []
    const totalFiles = Object.entries(deployFiles).length
    let uploadedCount = 0

    for (const [path, content] of Object.entries(deployFiles)) {
      try {
        console.log(`[v0] Uploading file ${uploadedCount + 1}/${totalFiles}:`, path)

        const checkFileResponse = await fetch(`https://api.github.com/repos/${repoData.full_name}/contents/${path}`, {
          method: "GET",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "User-Agent": "v0-sandbox-app",
          },
        })

        let sha = undefined
        if (checkFileResponse.ok) {
          const existingFile = await checkFileResponse.json()
          sha = existingFile.sha
          console.log("[v0] File exists, updating with SHA:", sha)
        }

        const uploadResponse = await fetch(`https://api.github.com/repos/${repoData.full_name}/contents/${path}`, {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${accessToken}`,
            "Content-Type": "application/json",
            "User-Agent": "v0-sandbox-app",
          },
          body: JSON.stringify({
            message: sha ? `Update ${path}` : `Add ${path}`,
            content: Buffer.from(content as string).toString("base64"),
            ...(sha && { sha }),
          }),
        })

        const uploadData = await uploadResponse.json()
        if (!uploadResponse.ok) {
          console.error("[v0] Failed to upload file:", path, uploadData)
          uploadResults.push({ file: path, success: false, error: uploadData.message })
        } else {
          uploadResults.push({ file: path, success: true })
          uploadedCount++
        }
      } catch (error: any) {
        console.error("[v0] Error uploading file:", path, error)
        uploadResults.push({ file: path, success: false, error: error.message })
      }
    }

    const successfulUploads = uploadResults.filter((r) => r.success).length
    const failedUploads = uploadResults.filter((r) => !r.success)

    console.log("[v0] Upload summary:", { successfulUploads, failedUploads: failedUploads.length })

    return NextResponse.json({
      success: true,
      repoUrl: repoData.html_url,
      repoName: repoData.full_name,
      filesUploaded: successfulUploads,
      uploadSummary: {
        total: uploadResults.length,
        successful: successfulUploads,
        failed: failedUploads.length,
        failures: failedUploads,
      },
    })
  } catch (error: any) {
    console.error("[v0] GitHub deployment error:", error)
    return NextResponse.json(
      {
        success: false,
        error: error.message || "GitHub deployment failed",
        details: error.toString(),
      },
      { status: 400 },
    )
  }
}
